from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import os
import logging
import sys
import socket
import uuid
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from logging.handlers import SysLogHandler
import psycopg2
from psycopg2 import sql
from dotenv import load_dotenv

# Chargement des variables d'environnement
load_dotenv()
db_url = os.getenv('DATABASE_URL')

# Configuration du logging centralis√©
logger = logging.getLogger("buzzflix")
logger.setLevel(logging.INFO)

# Format de log unifi√© avec emojis et informations d√©taill√©es
log_format = '%(asctime)s [%(levelname)s] %(message)s'
formatter = logging.Formatter(log_format)

# Un seul handler pour le fichier de log
file_handler = logging.FileHandler('/var/log/buzzflix.log')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

app = Flask(__name__)
CORS(app)
executor = ThreadPoolExecutor(max_workers=10)


def get_db_connection():
    """√âtablit une connexion √† la base de donn√©es"""
    return psycopg2.connect(db_url)

def verify_series(series_id: str):
    """V√©rifie la s√©rie et l'abonnement de l'utilisateur"""
    logger.info(f"üîç V√©rification de la s√©rie: {series_id}")
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Requ√™te avec les bons noms de colonnes selon le sch√©ma
        cur.execute("""
            SELECT 
                s.id, 
                s."userId",
                s.theme,
                s.status,
                s.frequency,
                s."destinationType",
                p.name as plan_name,
                s."destinationId",
                s."destinationEmail"
            FROM "Series" s
            JOIN "User" u ON s."userId" = u.id
            LEFT JOIN "Subscription" sub ON u.id = sub."userId"
            LEFT JOIN "Plan" p ON sub."planId" = p.id
            WHERE s.id = %s
            AND sub.status = 'active'
        """, (series_id,))
        
        series = cur.fetchone()
        
        if not series:
            logger.error(f"‚ùå S√©rie non trouv√©e: {series_id}")
            return None, "Series not found"
            
        series_info = {
            'id': series[0],
            'userId': series[1],
            'theme': series[2],
            'status': series[3],
            'frequency': series[4],
            'destinationType': series[5],
            'plan_name': series[6],
            'destinationId': series[7],
            'destinationEmail': series[8]
        }
        
        if not series_info['plan_name']:
            logger.error(f"‚ùå Pas d'abonnement actif pour l'utilisateur: {series_info['userId']}")
            return None, "No active subscription"

        logger.info(f"""
        ‚úÖ S√©rie trouv√©e:
        ‚îú‚îÄ‚îÄ Series ID: {series_info['id']}
        ‚îú‚îÄ‚îÄ User ID: {series_info['userId']}
        ‚îú‚îÄ‚îÄ Theme: {series_info['theme']}
        ‚îú‚îÄ‚îÄ Status: {series_info['status']}
        ‚îú‚îÄ‚îÄ Frequency: {series_info['frequency']} videos/week
        ‚îú‚îÄ‚îÄ Plan: {series_info['plan_name']}
        ‚îî‚îÄ‚îÄ Destination: {series_info['destinationType']}
        """)
        
        return series_info, None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification de la s√©rie: {str(e)}", exc_info=True)
        return None, str(e)
    finally:
        cur.close()
        conn.close()

def create_video_and_schedule(series_id: str, scheduled_time: datetime):
    """Cr√©e une nouvelle vid√©o et sa planification"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Cr√©ation de la vid√©o avec ID unique
        video_id = str(uuid.uuid4())
        current_time = datetime.utcnow()
        
        cur.execute("""
            INSERT INTO "Video" (
                id, "seriesId", status, "createdAt", "updatedAt"
            )
            VALUES (%s, %s, 'pending', %s, %s)
            RETURNING id
        """, (video_id, series_id, current_time, current_time))
        
        video_id = cur.fetchone()[0]

        # Cr√©ation de la planification
        schedule_id = str(uuid.uuid4())
        cur.execute("""
            INSERT INTO "PublicationSchedule" (
                id, "seriesId", "videoId", "scheduledTime", platform, status, 
                "createdAt", "updatedAt"
            )
            VALUES (%s, %s, %s, %s, 'tiktok', 'scheduled', %s, %s)
            RETURNING id
        """, (schedule_id, series_id, video_id, scheduled_time, current_time, current_time))
        
        schedule_id = cur.fetchone()[0]
        conn.commit()
        
        return video_id, schedule_id
        
    except Exception as e:
        conn.rollback()
        logger.error(f"‚ùå Erreur lors de la cr√©ation vid√©o/planning: {str(e)}")
        raise
    finally:
        cur.close()
        conn.close()

def schedule_future_videos(series_id: str, frequency: int):
    """Planifie les futures vid√©os pour la semaine"""
    logger.info(f"üìÖ Planification des futures vid√©os pour la s√©rie: {series_id}")
    scheduled_videos = []

    try:
        days_between_videos = 7 / frequency
        next_date = datetime.utcnow()

        for i in range(frequency):
            next_date = next_date + timedelta(days=days_between_videos)
            
            # Cr√©er une nouvelle vid√©o et sa planification
            video_id, schedule_id = create_video_and_schedule(series_id, next_date)
            
            scheduled_videos.append({
                'video_id': video_id,
                'scheduled_time': next_date.isoformat()
            })
            
            logger.info(f"""
            üìΩÔ∏è Vid√©o planifi√©e:
            ‚îú‚îÄ‚îÄ Video ID: {video_id}
            ‚îú‚îÄ‚îÄ Schedule ID: {schedule_id}
            ‚îî‚îÄ‚îÄ Date pr√©vue: {next_date.isoformat()}
            """)

        return scheduled_videos
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la planification des vid√©os: {str(e)}", exc_info=True)
        return False

def trigger_lambda(payload):
    """D√©clenche la g√©n√©ration de vid√©o via Lambda"""
    try:
        logger.info(f"""
        üöÄ D√©clenchement de Lambda:
        ‚îú‚îÄ‚îÄ Series ID: {payload.get('series_id')}
        ‚îú‚îÄ‚îÄ Video ID: {payload.get('video_id')}
        ‚îî‚îÄ‚îÄ Theme: {payload.get('theme')}
        """)
        
        response = requests.post(
            os.getenv('AWS_LAMBDA_ENDPOINT'),
            json=payload,
            headers={'Content-Type': 'application/json'},
            timeout=1
        )
        
        logger.info("‚úÖ Lambda d√©clench√© avec succ√®s (timeout attendu)")
        
    except requests.exceptions.Timeout:
        logger.info("‚è±Ô∏è Lambda timeout (comportement normal)")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©clenchement de Lambda: {str(e)}", exc_info=True)

@app.route('/create_series', methods=['POST'])
def create_series():
    try:
        data = request.json
        series_id = data.get('series_id')
        logger.info(f"üì• Nouvelle requ√™te de cr√©ation pour la s√©rie: {series_id}")

        # V√©rifier la s√©rie et l'abonnement
        series_info, error = verify_series(series_id)
        if error:
            return jsonify({
                'status': 'error',
                'message': error
            }), 404 if error == "Series not found" else 403

        # Pr√©parer le payload Lambda
        lambda_payload = {
            'user_id': series_info['userId'],
            'series_id': series_id,
            'video_id': data['video_id'],
            'destination': series_info['destinationType'],
            'destination_id': series_info['destinationId'],
            'destination_email': series_info['destinationEmail'],
            'theme': data['theme'],
            'voice': data['voice'],
            'language': data['language'],
            'duration_range': data['duration_range']
        }

        # D√©clencher la premi√®re g√©n√©ration
        executor.submit(trigger_lambda, lambda_payload)

        scheduled_videos = []
        # Planification des vid√©os futures pour les abonnements payants
        if series_info['plan_name'] != 'FREE':
            logger.info(f"üíé Abonnement premium d√©tect√© - Planification de {series_info['frequency']} vid√©os par semaine")
            scheduled_videos = schedule_future_videos(series_id, series_info['frequency'])
        else:
            logger.info("üÜì Abonnement gratuit - G√©n√©ration unique")

        response_data = {
            'status': 'success',
            'message': 'Video generation started',
            'data': {
                'plan_type': series_info['plan_name'],
                'is_free': series_info['plan_name'] == 'FREE',
                'frequency': series_info['frequency'],
                'scheduled_videos': scheduled_videos
            }
        }
        
        logger.info(f"‚úÖ Traitement termin√© pour la s√©rie {series_id}")
        return jsonify(response_data)

    except Exception as e:
        logger.error(f"‚ùå Erreur dans create_series: {str(e)}", exc_info=True)
        return jsonify({
            'status': 'error',
            'message': 'Internal server error'
        }), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)