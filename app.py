from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import os
import logging
import sys
import socket
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from logging.handlers import SysLogHandler
from prisma import Prisma
from prisma.models import Series
from dotenv import load_dotenv

# Chargement des variables d'environnement
load_dotenv()

# Configuration du logging avec formatage plus d√©taill√©
logger = logging.getLogger("buzzflix-server")
logger.setLevel(logging.INFO)

# Format de log plus d√©taill√©
log_format = '%(asctime)s [%(levelname)s] %(message)s - {%(pathname)s:%(lineno)d}'
formatter = logging.Formatter(log_format)

# Handler pour syslog
try:
    syslog = SysLogHandler(address='/dev/log', facility=SysLogHandler.LOG_LOCAL0)
    syslog.setFormatter(formatter)
    logger.addHandler(syslog)
except (OSError, socket.error):
    logger.warning("Syslog non disponible, utilisation du stdout uniquement")

# Handler pour stdout
stdout = logging.StreamHandler(sys.stdout)
stdout.setFormatter(formatter)
logger.addHandler(stdout)

app = Flask(__name__)
CORS(app)
executor = ThreadPoolExecutor(max_workers=10)
prisma = Prisma()

def log_series_info(series: Series, message: str):
    """Fonction utilitaire pour logger les informations de la s√©rie"""
    subscription_info = series.user.subscription
    plan_info = subscription_info.plan if subscription_info else None
    
    logger.info(f"""
    {message}
    ‚îú‚îÄ‚îÄ Series ID: {series.id}
    ‚îú‚îÄ‚îÄ User ID: {series.userId}
    ‚îú‚îÄ‚îÄ Theme: {series.theme}
    ‚îú‚îÄ‚îÄ Status: {series.status}
    ‚îú‚îÄ‚îÄ Frequency: {series.frequency} videos/week
    ‚îú‚îÄ‚îÄ Subscription Plan: {plan_info.name if plan_info else 'No Plan'}
    ‚îî‚îÄ‚îÄ Destination: {series.destinationType}
    """)

async def verify_series(series_id: str):
    """V√©rifie la s√©rie et l'abonnement de l'utilisateur"""
    logger.info(f"üîç V√©rification de la s√©rie: {series_id}")
    
    try:
        # R√©cup√©rer la s√©rie avec les informations de l'utilisateur et de l'abonnement
        series = await prisma.series.find_unique(
            where={
                'id': series_id
            },
            include={
                'user': {
                    'include': {
                        'subscription': {
                            'include': {
                                'plan': True
                            }
                        }
                    }
                }
            }
        )

        if not series:
            logger.error(f"‚ùå S√©rie non trouv√©e: {series_id}")
            return None, "Series not found"

        log_series_info(series, "‚úÖ S√©rie trouv√©e:")

        if not series.user.subscription or not series.user.subscription.plan:
            logger.error(f"‚ùå Pas d'abonnement actif pour l'utilisateur: {series.userId}")
            return None, "No active subscription"

        logger.info(f"‚úÖ Plan v√©rifi√©: {series.user.subscription.plan.name}")
        return series, None

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification de la s√©rie: {str(e)}", exc_info=True)
        return None, str(e)

async def schedule_future_videos(series_id: str, frequency: int):
    """Planifie les futures vid√©os pour la semaine"""
    logger.info(f"üìÖ Planification des futures vid√©os pour la s√©rie: {series_id}")
    try:
        days_between_videos = 7 / frequency
        next_date = datetime.utcnow()
        scheduled_videos = []

        for i in range(frequency):
            next_date = next_date + timedelta(days=days_between_videos)
            
            # Cr√©er une nouvelle vid√©o
            video = await prisma.video.create({
                'data': {
                    'seriesId': series_id,
                    'status': 'pending'
                }
            })

            # Cr√©er la planification
            schedule = await prisma.publicationschedule.create({
                'data': {
                    'seriesId': series_id,
                    'videoId': video.id,
                    'scheduledTime': next_date,
                    'platform': 'tiktok',
                    'status': 'scheduled'
                }
            })
            
            scheduled_videos.append({
                'video_id': video.id,
                'scheduled_time': next_date.isoformat()
            })
            
            logger.info(f"""
            üìΩÔ∏è Vid√©o planifi√©e:
            ‚îú‚îÄ‚îÄ Video ID: {video.id}
            ‚îú‚îÄ‚îÄ Schedule ID: {schedule.id}
            ‚îî‚îÄ‚îÄ Date pr√©vue: {next_date.isoformat()}
            """)

        return scheduled_videos
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la planification des vid√©os: {str(e)}", exc_info=True)
        return False

def trigger_lambda(payload):
    """D√©clenche la g√©n√©ration de vid√©o via Lambda"""
    try:
        logger.info(f"""
        üöÄ D√©clenchement de Lambda:
        ‚îú‚îÄ‚îÄ Series ID: {payload.get('series_id')}
        ‚îú‚îÄ‚îÄ Video ID: {payload.get('video_id')}
        ‚îî‚îÄ‚îÄ Theme: {payload.get('theme')}
        """)
        
        response = requests.post(
            os.getenv('AWS_LAMBDA_ENDPOINT'),
            json=payload,
            headers={'Content-Type': 'application/json'},
            timeout=1
        )
        
        logger.info("‚úÖ Lambda d√©clench√© avec succ√®s (timeout attendu)")
        
    except requests.exceptions.Timeout:
        logger.info("‚è±Ô∏è Lambda timeout (comportement normal)")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©clenchement de Lambda: {str(e)}", exc_info=True)

@app.before_first_request
async def connect_db():
    """Initialise la connexion √† la base de donn√©es"""
    logger.info("üîå Connexion √† la base de donn√©es...")
    try:
        await prisma.connect()
        logger.info("‚úÖ Connexion √† la base de donn√©es √©tablie")
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {str(e)}", exc_info=True)
        raise

@app.route('/create_series', methods=['POST'])
async def create_series():
    try:
        data = request.json
        series_id = data.get('series_id')
        logger.info(f"üì• Nouvelle requ√™te de cr√©ation pour la s√©rie: {series_id}")

        # V√©rifier la s√©rie et l'abonnement
        series, error = await verify_series(series_id)
        if error:
            return jsonify({
                'status': 'error',
                'message': error
            }), 404 if error == "Series not found" else 403

        # Pr√©parer le payload Lambda
        lambda_payload = {
            'user_id': series.userId,
            'series_id': series_id,
            'video_id': data['video_id'],
            'destination': data.get('destination', 'email'),
            'theme': data['theme'],
            'voice': data['voice'],
            'language': data['language'],
            'duration_range': data['duration_range']
        }

        # D√©clencher la premi√®re g√©n√©ration
        executor.submit(trigger_lambda, lambda_payload)

        scheduled_videos = []
        # Planification des vid√©os futures pour les abonnements payants
        if series.user.subscription.plan.name != 'FREE':
            logger.info(f"üíé Abonnement premium d√©tect√© - Planification de {series.frequency} vid√©os par semaine")
            scheduled_videos = await schedule_future_videos(series_id, series.frequency)
        else:
            logger.info("üÜì Abonnement gratuit - G√©n√©ration unique")

        response_data = {
            'status': 'success',
            'message': 'Video generation started',
            'data': {
                'plan_type': series.user.subscription.plan.name,
                'is_free': series.user.subscription.plan.name == 'FREE',
                'frequency': series.frequency,
                'scheduled_videos': scheduled_videos
            }
        }
        
        logger.info(f"‚úÖ Traitement termin√© pour la s√©rie {series_id}")
        return jsonify(response_data)

    except Exception as e:
        logger.error(f"‚ùå Erreur dans create_series: {str(e)}", exc_info=True)
        return jsonify({
            'status': 'error',
            'message': 'Internal server error'
        }), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)