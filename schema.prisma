datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  password           String?
  image              String?
  accounts           Account[]
  sessions           Session[]
  authenticators     Authenticator[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  resetToken         String?
  resetTokenExpiry   DateTime?
  series             Series[]
  socialAccounts     SocialAccount[]
  subscription       Subscription?
  usage              Usage[]
  stripeCustomerId   String?
  tiktokAccessToken  String?
  tiktokRefreshToken String?
  tiktokTokenExpiry  DateTime?
  emailVerified      String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model SocialAccount {
  id                String    @id @default(cuid())
  userId            String
  platform          String
  accountIdentifier String
  accessToken       String?
  refreshToken      String?
  tokenExpiresAt    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  series            Series[]

  @@unique([userId, platform])
}

model Series {
  id               String                @id @default(cuid())
  userId           String
  prompt           String?
  theme            String
  language         String
  voice            String
  durationRange    String
  frequency        Int
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  status           String                @default("active")
  destinationType  String
  destinationId    String?
  destinationEmail String?
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccount    SocialAccount?        @relation(fields: [destinationId], references: [id])
  videos           Video[]
  schedules        PublicationSchedule[]
}

model Video {
  id           String                @id @default(cuid())
  seriesId     String
  title        String?
  description  String?
  script       String?
  fileUrl      String?
  thumbnailUrl String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  status       String                @default("pending")
  series       Series                @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  schedules    PublicationSchedule[]
  stats        VideoStat[]
}

model PublicationSchedule {
  id            String   @id @default(cuid())
  seriesId      String
  videoId       String
  scheduledTime DateTime
  platform      String
  status        String   @default("scheduled")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  series        Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  video         Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model VideoStat {
  id        String   @id @default(cuid())
  videoId   String
  views     Int      @default(0)
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  platform  String
  updatedAt DateTime @updatedAt
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  planId               String
  status               String   @default("active")
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                 Plan     @relation(fields: [planId], references: [id])
  stripeSubscriptionId String?
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  price         Float
  interval      String
  maxSeries     Int
  maxFrequency  Int
  createdAt     DateTime       @default(now())
  subscriptions Subscription[]
  stripePriceId String?
}

model Usage {
  id            String   @id @default(cuid())
  userId        String
  seriesCount   Int      @default(0)
  videosCreated Int      @default(0)
  periodStart   DateTime
  periodEnd     DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
